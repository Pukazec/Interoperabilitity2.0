<?xml version="1.0" encoding="UTF-8"?>
<extension-documentation>
    <configs>
        <config name="config">
            <description><![CDATA[Default configuration]]></description>
            <parameters>
                <parameter name="name">
                    <description><![CDATA[The identifier of this element used to reference it in other components]]></description>
                </parameter>
                <parameter name="expirationPolicy">
                    <description><![CDATA[Configures the minimum amount of time that a dynamic configuration instance can remain idle before the runtime considers it eligible for expiration. This does not mean that the platform will expire the instance at the exact moment that it becomes eligible. The runtime will actually purge the instances when it sees it fit.]]></description>
                </parameter>
            </parameters>
        </config>
    </configs>
    <connections>
        <connection name="connection">
            <description><![CDATA[Cached Connection provider that creates MQTT Connections. Allows the user to specify a connection URL for the broker.]]></description>
            <parameters>
                <parameter name="clientIDGenerator">
                    <description><![CDATA[A ClientIDGenerator that generates a Client ID to identify a connection to the MQTT broker.]]></description>
                </parameter>
                <parameter name="username">
                    <description><![CDATA[Username to be used when providing authentication credentials to the MQTT broker.]]></description>
                </parameter>
                <parameter name="password">
                    <description><![CDATA[Password to be used when providing authentication credentials to the MQTT broker.]]></description>
                </parameter>
                <parameter name="tlsContextFactory">
                    <description><![CDATA[A factory for TLS contexts. A TLS context is configured with a key store and a trust store. Allows to create TLS secured connections.]]></description>
                </parameter>
                <parameter name="url">
                    <description><![CDATA[The url that represents the broker to connect to.]]></description>
                </parameter>
                <parameter name="topic">
                    <description><![CDATA[The topic to which the last will and testament message will be published.]]></description>
                </parameter>
                <parameter name="body">
                    <description><![CDATA[The content of the last will and testament message.]]></description>
                </parameter>
                <parameter name="qos">
                    <description><![CDATA[The quality of service QoS with which the last will and testament message will be published. Defaults to AT_LEAST_ONCE]]></description>
                </parameter>
                <parameter name="isRetained">
                    <description><![CDATA[If set to true the last will and testament message will be retained by the broker.]]></description>
                </parameter>
                <parameter name="connectionTimeout">
                    <description><![CDATA[The socket connection timeout value. This attribute works in tandem with #timeoutUnit. In the case of multiple fail-over URLs provided, the timeout applies to each one individually.]]></description>
                </parameter>
                <parameter name="timeoutUnit">
                    <description><![CDATA[A TimeUnit which qualifies the #connectionTimeout attribute. Defaults to SECONDS]]></description>
                </parameter>
                <parameter name="keepAliveInterval">
                    <description><![CDATA[The amount of time that the connection between client and broker will be kept alive without any messages being exchanged. If the keep-alive interval is 0, then the keep-alive mechanism is disabled.]]></description>
                </parameter>
                <parameter name="keepAliveIntervalUnit">
                    <description><![CDATA[The unit of time that corresponds to the keepAliveInterval parameter. Defaults to SECONDS]]></description>
                </parameter>
                <parameter name="maxInFlight">
                    <description><![CDATA[The maximum amount of messages that can be unacknowledged at a given time. Setting it to 0 means, there can be unlimited in-flight messages.]]></description>
                </parameter>
                <parameter name="cleanSession">
                    <description><![CDATA[If set to true, the session will be cleaned each time the client disconnects from the broker. Subscriptions will not be saved and offline (qos 1 and 2) messages for that client will be lost.]]></description>
                </parameter>
                <parameter name="enableFilePersistence">
                    <description><![CDATA[If set to true, creates an file-based persistent data store, used to store outbound and inbound messages while they are in flight, enabling delivery to the QoS specified.]]></description>
                </parameter>
                <parameter name="dataStorePath">
                    <description><![CDATA[The directory where the file-based persistent data store will be created if enableFilePersistence is set to true.]]></description>
                </parameter>
                <parameter name="reconnection">
                    <description><![CDATA[When the application is deployed, a connectivity test is performed on all connectors. If set to true, deployment will fail if the test doesn't pass after exhausting the associated reconnection strategy]]></description>
                </parameter>
            </parameters>
        </connection>
        <connection name="fail-over">
            <description><![CDATA[Cached Connection provider that creates MQTT Connections. Allows the user to specify a list of FailOverURLs that the connection provider can iterate over until a connection is successfully established.]]></description>
            <parameters>
                <parameter name="clientIDGenerator">
                    <description><![CDATA[A ClientIDGenerator that generates a Client ID to identify a connection to the MQTT broker.]]></description>
                </parameter>
                <parameter name="username">
                    <description><![CDATA[Username to be used when providing authentication credentials to the MQTT broker.]]></description>
                </parameter>
                <parameter name="password">
                    <description><![CDATA[Password to be used when providing authentication credentials to the MQTT broker.]]></description>
                </parameter>
                <parameter name="tlsContextFactory">
                    <description><![CDATA[A factory for TLS contexts. A TLS context is configured with a key store and a trust store. Allows to create TLS secured connections.]]></description>
                </parameter>
                <parameter name="failOverServers">
                    <description><![CDATA[The list of server URLs that will be used to (attempt to) establish a connection to the broker.]]></description>
                </parameter>
                <parameter name="topic">
                    <description><![CDATA[The topic to which the last will and testament message will be published.]]></description>
                </parameter>
                <parameter name="body">
                    <description><![CDATA[The content of the last will and testament message.]]></description>
                </parameter>
                <parameter name="qos">
                    <description><![CDATA[The quality of service QoS with which the last will and testament message will be published. Defaults to AT_LEAST_ONCE]]></description>
                </parameter>
                <parameter name="isRetained">
                    <description><![CDATA[If set to true the last will and testament message will be retained by the broker.]]></description>
                </parameter>
                <parameter name="connectionTimeout">
                    <description><![CDATA[The socket connection timeout value. This attribute works in tandem with #timeoutUnit. In the case of multiple fail-over URLs provided, the timeout applies to each one individually.]]></description>
                </parameter>
                <parameter name="timeoutUnit">
                    <description><![CDATA[A TimeUnit which qualifies the #connectionTimeout attribute. Defaults to SECONDS]]></description>
                </parameter>
                <parameter name="keepAliveInterval">
                    <description><![CDATA[The amount of time that the connection between client and broker will be kept alive without any messages being exchanged. If the keep-alive interval is 0, then the keep-alive mechanism is disabled.]]></description>
                </parameter>
                <parameter name="keepAliveIntervalUnit">
                    <description><![CDATA[The unit of time that corresponds to the keepAliveInterval parameter. Defaults to SECONDS]]></description>
                </parameter>
                <parameter name="maxInFlight">
                    <description><![CDATA[The maximum amount of messages that can be unacknowledged at a given time. Setting it to 0 means, there can be unlimited in-flight messages.]]></description>
                </parameter>
                <parameter name="cleanSession">
                    <description><![CDATA[If set to true, the session will be cleaned each time the client disconnects from the broker. Subscriptions will not be saved and offline (qos 1 and 2) messages for that client will be lost.]]></description>
                </parameter>
                <parameter name="enableFilePersistence">
                    <description><![CDATA[If set to true, creates an file-based persistent data store, used to store outbound and inbound messages while they are in flight, enabling delivery to the QoS specified.]]></description>
                </parameter>
                <parameter name="dataStorePath">
                    <description><![CDATA[The directory where the file-based persistent data store will be created if enableFilePersistence is set to true.]]></description>
                </parameter>
                <parameter name="reconnection">
                    <description><![CDATA[When the application is deployed, a connectivity test is performed on all connectors. If set to true, deployment will fail if the test doesn't pass after exhausting the associated reconnection strategy]]></description>
                </parameter>
            </parameters>
        </connection>
        <connection name="form">
            <description><![CDATA[Cached Connection provider that creates MQTT Connections. Allows the user to specify a protocol, host and port to establish a connection with the broker.]]></description>
            <parameters>
                <parameter name="clientIDGenerator">
                    <description><![CDATA[A ClientIDGenerator that generates a Client ID to identify a connection to the MQTT broker.]]></description>
                </parameter>
                <parameter name="username">
                    <description><![CDATA[Username to be used when providing authentication credentials to the MQTT broker.]]></description>
                </parameter>
                <parameter name="password">
                    <description><![CDATA[Password to be used when providing authentication credentials to the MQTT broker.]]></description>
                </parameter>
                <parameter name="tlsContextFactory">
                    <description><![CDATA[A factory for TLS contexts. A TLS context is configured with a key store and a trust store. Allows to create TLS secured connections.]]></description>
                </parameter>
                <parameter name="protocol">
                    <description><![CDATA[The protocol to be used when connecting to the broker. Defaults to TCP]]></description>
                </parameter>
                <parameter name="host">
                    <description><![CDATA[The host of the broker to connect to.]]></description>
                </parameter>
                <parameter name="port">
                    <description><![CDATA[The broker's port to connect to.]]></description>
                </parameter>
                <parameter name="topic">
                    <description><![CDATA[The topic to which the last will and testament message will be published.]]></description>
                </parameter>
                <parameter name="body">
                    <description><![CDATA[The content of the last will and testament message.]]></description>
                </parameter>
                <parameter name="qos">
                    <description><![CDATA[The quality of service QoS with which the last will and testament message will be published. Defaults to AT_LEAST_ONCE]]></description>
                </parameter>
                <parameter name="isRetained">
                    <description><![CDATA[If set to true the last will and testament message will be retained by the broker.]]></description>
                </parameter>
                <parameter name="connectionTimeout">
                    <description><![CDATA[The socket connection timeout value. This attribute works in tandem with #timeoutUnit. In the case of multiple fail-over URLs provided, the timeout applies to each one individually.]]></description>
                </parameter>
                <parameter name="timeoutUnit">
                    <description><![CDATA[A TimeUnit which qualifies the #connectionTimeout attribute. Defaults to SECONDS]]></description>
                </parameter>
                <parameter name="keepAliveInterval">
                    <description><![CDATA[The amount of time that the connection between client and broker will be kept alive without any messages being exchanged. If the keep-alive interval is 0, then the keep-alive mechanism is disabled.]]></description>
                </parameter>
                <parameter name="keepAliveIntervalUnit">
                    <description><![CDATA[The unit of time that corresponds to the keepAliveInterval parameter. Defaults to SECONDS]]></description>
                </parameter>
                <parameter name="maxInFlight">
                    <description><![CDATA[The maximum amount of messages that can be unacknowledged at a given time. Setting it to 0 means, there can be unlimited in-flight messages.]]></description>
                </parameter>
                <parameter name="cleanSession">
                    <description><![CDATA[If set to true, the session will be cleaned each time the client disconnects from the broker. Subscriptions will not be saved and offline (qos 1 and 2) messages for that client will be lost.]]></description>
                </parameter>
                <parameter name="enableFilePersistence">
                    <description><![CDATA[If set to true, creates an file-based persistent data store, used to store outbound and inbound messages while they are in flight, enabling delivery to the QoS specified.]]></description>
                </parameter>
                <parameter name="dataStorePath">
                    <description><![CDATA[The directory where the file-based persistent data store will be created if enableFilePersistence is set to true.]]></description>
                </parameter>
                <parameter name="reconnection">
                    <description><![CDATA[When the application is deployed, a connectivity test is performed on all connectors. If set to true, deployment will fail if the test doesn't pass after exhausting the associated reconnection strategy]]></description>
                </parameter>
            </parameters>
        </connection>
        <connection name="connection">
            <description><![CDATA[Cached Connection provider that creates MQTT Connections. Allows the user to specify a connection URL for the broker.]]></description>
            <parameters>
                <parameter name="clientIDGenerator">
                    <description><![CDATA[A ClientIDGenerator that generates a Client ID to identify a connection to the MQTT broker.]]></description>
                </parameter>
                <parameter name="username">
                    <description><![CDATA[Username to be used when providing authentication credentials to the MQTT broker.]]></description>
                </parameter>
                <parameter name="password">
                    <description><![CDATA[Password to be used when providing authentication credentials to the MQTT broker.]]></description>
                </parameter>
                <parameter name="tlsContextFactory">
                    <description><![CDATA[A factory for TLS contexts. A TLS context is configured with a key store and a trust store. Allows to create TLS secured connections.]]></description>
                </parameter>
                <parameter name="url">
                    <description><![CDATA[The url that represents the broker to connect to.]]></description>
                </parameter>
                <parameter name="topic">
                    <description><![CDATA[The topic to which the last will and testament message will be published.]]></description>
                </parameter>
                <parameter name="body">
                    <description><![CDATA[The content of the last will and testament message.]]></description>
                </parameter>
                <parameter name="qos">
                    <description><![CDATA[The quality of service QoS with which the last will and testament message will be published. Defaults to AT_LEAST_ONCE]]></description>
                </parameter>
                <parameter name="isRetained">
                    <description><![CDATA[If set to true the last will and testament message will be retained by the broker.]]></description>
                </parameter>
                <parameter name="connectionTimeout">
                    <description><![CDATA[The socket connection timeout value. This attribute works in tandem with #timeoutUnit. In the case of multiple fail-over URLs provided, the timeout applies to each one individually.]]></description>
                </parameter>
                <parameter name="timeoutUnit">
                    <description><![CDATA[A TimeUnit which qualifies the #connectionTimeout attribute. Defaults to SECONDS]]></description>
                </parameter>
                <parameter name="keepAliveInterval">
                    <description><![CDATA[The amount of time that the connection between client and broker will be kept alive without any messages being exchanged. If the keep-alive interval is 0, then the keep-alive mechanism is disabled.]]></description>
                </parameter>
                <parameter name="keepAliveIntervalUnit">
                    <description><![CDATA[The unit of time that corresponds to the keepAliveInterval parameter. Defaults to SECONDS]]></description>
                </parameter>
                <parameter name="maxInFlight">
                    <description><![CDATA[The maximum amount of messages that can be unacknowledged at a given time. Setting it to 0 means, there can be unlimited in-flight messages.]]></description>
                </parameter>
                <parameter name="cleanSession">
                    <description><![CDATA[If set to true, the session will be cleaned each time the client disconnects from the broker. Subscriptions will not be saved and offline (qos 1 and 2) messages for that client will be lost.]]></description>
                </parameter>
                <parameter name="enableFilePersistence">
                    <description><![CDATA[If set to true, creates an file-based persistent data store, used to store outbound and inbound messages while they are in flight, enabling delivery to the QoS specified.]]></description>
                </parameter>
                <parameter name="dataStorePath">
                    <description><![CDATA[The directory where the file-based persistent data store will be created if enableFilePersistence is set to true.]]></description>
                </parameter>
                <parameter name="reconnection">
                    <description><![CDATA[When the application is deployed, a connectivity test is performed on all connectors. If set to true, deployment will fail if the test doesn't pass after exhausting the associated reconnection strategy]]></description>
                </parameter>
            </parameters>
        </connection>
        <connection name="fail-over">
            <description><![CDATA[Cached Connection provider that creates MQTT Connections. Allows the user to specify a list of FailOverURLs that the connection provider can iterate over until a connection is successfully established.]]></description>
            <parameters>
                <parameter name="clientIDGenerator">
                    <description><![CDATA[A ClientIDGenerator that generates a Client ID to identify a connection to the MQTT broker.]]></description>
                </parameter>
                <parameter name="username">
                    <description><![CDATA[Username to be used when providing authentication credentials to the MQTT broker.]]></description>
                </parameter>
                <parameter name="password">
                    <description><![CDATA[Password to be used when providing authentication credentials to the MQTT broker.]]></description>
                </parameter>
                <parameter name="tlsContextFactory">
                    <description><![CDATA[A factory for TLS contexts. A TLS context is configured with a key store and a trust store. Allows to create TLS secured connections.]]></description>
                </parameter>
                <parameter name="failOverServers">
                    <description><![CDATA[The list of server URLs that will be used to (attempt to) establish a connection to the broker.]]></description>
                </parameter>
                <parameter name="topic">
                    <description><![CDATA[The topic to which the last will and testament message will be published.]]></description>
                </parameter>
                <parameter name="body">
                    <description><![CDATA[The content of the last will and testament message.]]></description>
                </parameter>
                <parameter name="qos">
                    <description><![CDATA[The quality of service QoS with which the last will and testament message will be published. Defaults to AT_LEAST_ONCE]]></description>
                </parameter>
                <parameter name="isRetained">
                    <description><![CDATA[If set to true the last will and testament message will be retained by the broker.]]></description>
                </parameter>
                <parameter name="connectionTimeout">
                    <description><![CDATA[The socket connection timeout value. This attribute works in tandem with #timeoutUnit. In the case of multiple fail-over URLs provided, the timeout applies to each one individually.]]></description>
                </parameter>
                <parameter name="timeoutUnit">
                    <description><![CDATA[A TimeUnit which qualifies the #connectionTimeout attribute. Defaults to SECONDS]]></description>
                </parameter>
                <parameter name="keepAliveInterval">
                    <description><![CDATA[The amount of time that the connection between client and broker will be kept alive without any messages being exchanged. If the keep-alive interval is 0, then the keep-alive mechanism is disabled.]]></description>
                </parameter>
                <parameter name="keepAliveIntervalUnit">
                    <description><![CDATA[The unit of time that corresponds to the keepAliveInterval parameter. Defaults to SECONDS]]></description>
                </parameter>
                <parameter name="maxInFlight">
                    <description><![CDATA[The maximum amount of messages that can be unacknowledged at a given time. Setting it to 0 means, there can be unlimited in-flight messages.]]></description>
                </parameter>
                <parameter name="cleanSession">
                    <description><![CDATA[If set to true, the session will be cleaned each time the client disconnects from the broker. Subscriptions will not be saved and offline (qos 1 and 2) messages for that client will be lost.]]></description>
                </parameter>
                <parameter name="enableFilePersistence">
                    <description><![CDATA[If set to true, creates an file-based persistent data store, used to store outbound and inbound messages while they are in flight, enabling delivery to the QoS specified.]]></description>
                </parameter>
                <parameter name="dataStorePath">
                    <description><![CDATA[The directory where the file-based persistent data store will be created if enableFilePersistence is set to true.]]></description>
                </parameter>
                <parameter name="reconnection">
                    <description><![CDATA[When the application is deployed, a connectivity test is performed on all connectors. If set to true, deployment will fail if the test doesn't pass after exhausting the associated reconnection strategy]]></description>
                </parameter>
            </parameters>
        </connection>
        <connection name="form">
            <description><![CDATA[Cached Connection provider that creates MQTT Connections. Allows the user to specify a protocol, host and port to establish a connection with the broker.]]></description>
            <parameters>
                <parameter name="clientIDGenerator">
                    <description><![CDATA[A ClientIDGenerator that generates a Client ID to identify a connection to the MQTT broker.]]></description>
                </parameter>
                <parameter name="username">
                    <description><![CDATA[Username to be used when providing authentication credentials to the MQTT broker.]]></description>
                </parameter>
                <parameter name="password">
                    <description><![CDATA[Password to be used when providing authentication credentials to the MQTT broker.]]></description>
                </parameter>
                <parameter name="tlsContextFactory">
                    <description><![CDATA[A factory for TLS contexts. A TLS context is configured with a key store and a trust store. Allows to create TLS secured connections.]]></description>
                </parameter>
                <parameter name="protocol">
                    <description><![CDATA[The protocol to be used when connecting to the broker. Defaults to TCP]]></description>
                </parameter>
                <parameter name="host">
                    <description><![CDATA[The host of the broker to connect to.]]></description>
                </parameter>
                <parameter name="port">
                    <description><![CDATA[The broker's port to connect to.]]></description>
                </parameter>
                <parameter name="topic">
                    <description><![CDATA[The topic to which the last will and testament message will be published.]]></description>
                </parameter>
                <parameter name="body">
                    <description><![CDATA[The content of the last will and testament message.]]></description>
                </parameter>
                <parameter name="qos">
                    <description><![CDATA[The quality of service QoS with which the last will and testament message will be published. Defaults to AT_LEAST_ONCE]]></description>
                </parameter>
                <parameter name="isRetained">
                    <description><![CDATA[If set to true the last will and testament message will be retained by the broker.]]></description>
                </parameter>
                <parameter name="connectionTimeout">
                    <description><![CDATA[The socket connection timeout value. This attribute works in tandem with #timeoutUnit. In the case of multiple fail-over URLs provided, the timeout applies to each one individually.]]></description>
                </parameter>
                <parameter name="timeoutUnit">
                    <description><![CDATA[A TimeUnit which qualifies the #connectionTimeout attribute. Defaults to SECONDS]]></description>
                </parameter>
                <parameter name="keepAliveInterval">
                    <description><![CDATA[The amount of time that the connection between client and broker will be kept alive without any messages being exchanged. If the keep-alive interval is 0, then the keep-alive mechanism is disabled.]]></description>
                </parameter>
                <parameter name="keepAliveIntervalUnit">
                    <description><![CDATA[The unit of time that corresponds to the keepAliveInterval parameter. Defaults to SECONDS]]></description>
                </parameter>
                <parameter name="maxInFlight">
                    <description><![CDATA[The maximum amount of messages that can be unacknowledged at a given time. Setting it to 0 means, there can be unlimited in-flight messages.]]></description>
                </parameter>
                <parameter name="cleanSession">
                    <description><![CDATA[If set to true, the session will be cleaned each time the client disconnects from the broker. Subscriptions will not be saved and offline (qos 1 and 2) messages for that client will be lost.]]></description>
                </parameter>
                <parameter name="enableFilePersistence">
                    <description><![CDATA[If set to true, creates an file-based persistent data store, used to store outbound and inbound messages while they are in flight, enabling delivery to the QoS specified.]]></description>
                </parameter>
                <parameter name="dataStorePath">
                    <description><![CDATA[The directory where the file-based persistent data store will be created if enableFilePersistence is set to true.]]></description>
                </parameter>
                <parameter name="reconnection">
                    <description><![CDATA[When the application is deployed, a connectivity test is performed on all connectors. If set to true, deployment will fail if the test doesn't pass after exhausting the associated reconnection strategy]]></description>
                </parameter>
            </parameters>
        </connection>
    </connections>
    <extension name="MQTT3">
        <description><![CDATA[MQTT3 is a MQTT v3 compliant MuleSoft Extension, used to consume and produce MQTT Messages. The Extension supports all MQTT v3 functionality including message retention, last will and testament messages and persistent sessions.]]></description>
        <parameters/>
    </extension>
    <operations>
        <operation name="publish">
            <description><![CDATA[Operation that allows the user to publish a single MQTT3Message to a given exchange]]></description>
            <parameters>
                <parameter name="topic">
                    <description><![CDATA[the topic to which the message must be published]]></description>
                </parameter>
                <parameter name="message">
                    <description><![CDATA[the content of the message to be published]]></description>
                </parameter>
                <parameter name="qos">
                    <description><![CDATA[the QoS with which the message will be published]]></description>
                </parameter>
                <parameter name="isRetained">
                    <description><![CDATA[whether the message should be retained by the broker]]></description>
                </parameter>
                <parameter name="config-ref">
                    <description><![CDATA[The name of the configuration to be used to execute this component]]></description>
                </parameter>
                <parameter name="target">
                    <description><![CDATA[The name of a variable on which the operation's output will be placed]]></description>
                </parameter>
                <parameter name="targetValue">
                    <description><![CDATA[An expression that will be evaluated against the operation's output and the outcome of that expression will be stored in the target variable]]></description>
                </parameter>
                <parameter name="reconnectionStrategy">
                    <description><![CDATA[A retry strategy in case of connectivity errors]]></description>
                </parameter>
            </parameters>
        </operation>
    </operations>
    <sources>
        <source name="listener">
            <description><![CDATA[]]></description>
            <parameters>
                <parameter name="topics">
                    <description><![CDATA[The list of Topics that this listener will subscribe to.]]></description>
                </parameter>
                <parameter name="config-ref">
                    <description><![CDATA[The name of the configuration to be used to execute this component]]></description>
                </parameter>
                <parameter name="primaryNodeOnly">
                    <description><![CDATA[Whether this source should only be executed on the primary node when runnning in Cluster]]></description>
                </parameter>
                <parameter name="redeliveryPolicy">
                    <description><![CDATA[Defines a policy for processing the redelivery of the same message]]></description>
                </parameter>
                <parameter name="reconnectionStrategy">
                    <description><![CDATA[A retry strategy in case of connectivity errors]]></description>
                </parameter>
            </parameters>
        </source>
    </sources>
    <types>
        <type name="com.mulesoft.connectors.mqtt3.api.FailOverURL">
            <description><![CDATA[Represents one of several URLs to be included in the connection
 fail-over broker list in a MQTT3FailOverConnectionProvider.

 @since 1.0]]></description>
            <parameters>
                <parameter name="protocol">
                    <description><![CDATA[The protocol to be used when connecting to the broker.]]></description>
                </parameter>
                <parameter name="host">
                    <description><![CDATA[The host of the broker to connect to.]]></description>
                </parameter>
                <parameter name="port">
                    <description><![CDATA[The broker's port to connect to.]]></description>
                </parameter>
            </parameters>
        </type>
        <type name="com.mulesoft.connectors.mqtt3.api.MQTT3MessageAttributes">
            <description><![CDATA[Represents an MQTT3Message's attributes.

 @since 1.0]]></description>
            <parameters>
                <parameter name="topic">
                    <description><![CDATA[The topic to which the message was published.]]></description>
                </parameter>
                <parameter name="messageId">
                    <description><![CDATA[The MQTT id that identifies a message received from the broker.]]></description>
                </parameter>
                <parameter name="qos">
                    <description><![CDATA[The quality of service with which the message was delivered by the broker.]]></description>
                </parameter>
                <parameter name="isDuplicate">
                    <description><![CDATA[If set to true, this message might be a duplicate of one which has already been received.]]></description>
                </parameter>
                <parameter name="isRetained">
                    <description><![CDATA[If set to true, this message was either sent from a current publisher, or was "retained" by the server
 as the last message published on the topic.]]></description>
                </parameter>
            </parameters>
        </type>
        <type name="com.mulesoft.connectors.mqtt3.api.Topic">
            <description><![CDATA[Represents an MQTT v3 topic.

 @since 1.0]]></description>
            <parameters>
                <parameter name="topicFilter">
                    <description><![CDATA[A topic filter that can represent a single or multilevel subscription to a topic.]]></description>
                </parameter>
                <parameter name="qos">
                    <description><![CDATA[The QoS with which messages (destined to this topic's topicFilter)
 should be sent by the broker.
 <p>
 Defaults to AT_LEAST_ONCE]]></description>
                </parameter>
            </parameters>
        </type>
        <type name="com.mulesoft.connectors.mqtt3.api.clientId.ClientIDCustomExpressionGenerator">
            <description><![CDATA[A ClientIDGenerator implementation that allows the user
 to specify an client id and a custom expression to be
 added to the client id as a suffix. Both are optional, but at least one
 of these fields must be specified in order to successfully generate a client ID.]]></description>
            <parameters>
                <parameter name="clientId">
                    <description><![CDATA[Client id used to identify the connection to the MQTT broker.]]></description>
                </parameter>
                <parameter name="customClientIdSuffix">
                    <description><![CDATA[Custom client id suffix used to identify the connection to the MQTT broker.]]></description>
                </parameter>
            </parameters>
        </type>
        <type name="com.mulesoft.connectors.mqtt3.api.clientId.ClientIDGenerator">
            <description><![CDATA[Generates a Client ID to identify a connection
 to an MQTT Broker.

 @since 1.0]]></description>
            <parameters/>
        </type>
        <type name="com.mulesoft.connectors.mqtt3.api.clientId.ClientIDRandomSuffixGenerator">
            <description><![CDATA[A ClientIDGenerator implementation that will attach a random UUID to
 the specified Client ID, as a suffix. If a client ID is not provided, the random
 UUID will be used as the connection identifier.]]></description>
            <parameters>
                <parameter name="clientId">
                    <description><![CDATA[Client id to be used to identify the connection to the MQTT broker.]]></description>
                </parameter>
            </parameters>
        </type>
    </types>
</extension-documentation>
